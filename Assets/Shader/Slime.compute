// Each #kernel tells which function to compile; you can have many kernels

struct Agent {
    float2 position;
    float angle;
    float3 deposit;
};

RWStructuredBuffer<Agent> agents;
RWStructuredBuffer<float> randoms;
RWStructuredBuffer<float> randoms2;
RWTexture2D<float4> TrailMap;
RWTexture2D<float4> Colors;

uint width;
uint height;
uint numAgents;
float moveSpeed;
float sensorAngleSpacing;
float sensorOffset;
float sensorSize;
float turnSpeed;
float colorLow;
float colorHigh;
float colorSaturation;
float distanceBias;

float deltaTime;

uint hash(uint state) {
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scaleToRange01(uint state) {
    return state / 4294967295.0;
}


#pragma kernel CSMain
[numthreads(16,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= numAgents) { return; }

    Agent agent = agents[id.x];
    uint random = hash(agent.position.y * width + agent.position.x + hash(id.x));

    //Move agent
    float2 direction = float2(cos(agent.angle), sin(agent.angle));
    float2 newPos = agent.position + direction * moveSpeed * deltaTime;


    float success = 1;
    if(newPos.x < 0 || newPos.x >= width || newPos.y < 0 || newPos.y >= height) {
        newPos.x = min(width-1, max(0, newPos.x));
        newPos.y = min(height-1, max(0, newPos.y));
        agents[id.x].angle = agents[id.x].angle + 3.1415 + randoms[id.x] * 0.3;
        success = 0;
    }

    agents[id.x].position = newPos;
    float4 content = TrailMap[int2(newPos.x,newPos.y)];
    float3 d = agent.deposit;
    float4 n = float4(clamp(content.x+d.x,0,1),
                      clamp(content.y+d.y,0,1),
                      clamp(content.z+d.z,0,1),
                      1);

    TrailMap[int2(newPos.x, newPos.y)] = n;
}

#pragma kernel Steer

float sense(Agent agent, float angle, RWTexture2D<float4> trailMap)
{
    float2 direction = float2(cos(agent.angle+angle), sin(agent.angle+angle));
    float2 samplePos = agent.position + direction * sensorOffset;

    float sum = 0;

    float3 sub3 = -(float3(1,1,1) - agent.deposit * distanceBias);
    float4 sub4 = float4(sub3.x,sub3.y,sub3.z,1);
    for(int offX = -sensorSize; offX <= sensorSize; offX ++)
    {
        for(int offY = -sensorSize; offY <= sensorSize; offY++)
        {
            int sampleX = samplePos.x + offX;
            int sampleY = samplePos.y + offY;
            if(sampleX >= 0 && sampleX < width && sampleY >= 0 && sampleY < height)
            {
                float4 v = dot(trailMap[int2(sampleX,sampleY)], sub4);
                //float4 v = trailMap[int2(sampleX,sampleY)];
                //float3 v2 = v.xyz;
                float s = v.x + v.y + v.z;
                sum += s;
                //sum += trailMap[int2(sampleX,sampleY)].x;
            }
        }
    }
    //trailMap[samplePos] = float4(1,0,1,1);

    return sum;
}
[numthreads(16,1,1)]
void Steer (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= numAgents) { return; }
    Agent agent = agents[id.x];
    float weightForward = sense(agent, 0, TrailMap);
    float weightLeft = sense(agent, 0.3926, TrailMap);
    float weightRight = sense(agent, -0.3926, TrailMap);

    float randomSteerStrength = 1.0;//randoms2[id.x];

    if(weightForward > weightLeft && weightForward > weightRight)
    {
        agents[id.x].angle += 0;
    }
    else if(weightForward < weightLeft && weightForward < weightRight)
    {
        agents[id.x].angle += (randomSteerStrength - 0.5) * 2 * turnSpeed * deltaTime;
    }
    else if(weightRight > weightLeft)
    {
        agents[id.x].angle -= randomSteerStrength * turnSpeed * deltaTime;
    }
    else if(weightLeft > weightRight)
    {
        agents[id.x].angle += randomSteerStrength * turnSpeed * deltaTime;
    }
}

#pragma kernel Color

float map(float s, float a1, float a2, float b1, float b2)
{
    return b1 + (s-a1)*(b2-b1)/(a2-a1);
}

float3 HUEtoRGB(in float H)
{
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    return saturate(float3(R,G,B));
}

float3 HSVtoRGB(in float3 HSV)
{
    float3 RGB = HUEtoRGB(HSV.x);
    return ((RGB - 1) * HSV.y + 1) * HSV.z;
}

[numthreads(16,1,1)]
void Color (uint3 id : SV_DispatchThreadID)
{
    //float h = map(TrailMap[id.xy].x,0.0,1.0, colorLow, colorHigh);
    //float3 c = HSVtoRGB(float3(h, colorSaturation, 1));
    Colors[id.xy] = TrailMap[id.xy];//float4(c.x,c.y,c.z,1);
}