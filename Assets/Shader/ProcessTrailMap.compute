// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ProcessTrailMap

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> TrailMap;
RWTexture2D<float4> ProcessedTrailMap;

uint width;
uint height;
float deltaTime;
float evaporateSpeed;
float diffuseSpeed;

[numthreads(8,8,1)]
void ProcessTrailMap (uint3 id : SV_DispatchThreadID)
{
    ProcessedTrailMap[id.xy] = TrailMap[id.xy];

    if (id.x < 0 || id.x >= width || id.y < 0 || id.y >= height) {
        return;
    }

    float4 speed = float4(evaporateSpeed,evaporateSpeed,evaporateSpeed,0);
    float4 orig = TrailMap[id.xy];
    //float4 evaporated = max(0, orig - speed * deltaTime);

    float4 sum = 0;
    for(int offX = -1; offX <= 1; offX ++)
    {
        for(int offY = -1; offY <= 1; offY++)
        {
            int sampleX = id.x + offX;
            int sampleY = id.y + offY;
            if(sampleX >= 0 && sampleX < width && sampleY >= 0 && sampleY < height)
            {
                sum += TrailMap[int2(sampleX, sampleY)];
            }
        }
    }

    float4 blurResult = sum / 9;
    float4 diffusedValue = lerp(orig, blurResult, diffuseSpeed * deltaTime);
    float4 diffsuedAndEvaporatedValue = max(0, diffusedValue - evaporateSpeed * deltaTime);

    ProcessedTrailMap[id.xy] = diffsuedAndEvaporatedValue;
}

